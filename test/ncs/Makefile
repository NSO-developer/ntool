# Include standard NCS build definitions and rules
include $(NCS_DIR)/src/ncs/build/include.ncs.mk

# Include setup makefile (autogenerated) for handling packages and netsims
include ./setup.mk

.PHONY: all start stop clean db-clean

all: ncs-project packages/ntool packages packages/l3vpn packages/cisco-ios packages/cisco-iosxr packages/alu-sr netsim
	if [ ! -d ncs-cdb ]; then mkdir ncs-cdb; fi
	if [ ! -d init_data ]; then mkdir init_data; fi
	cp init_data/* ncs-cdb/. > /dev/null 2>&1 || true

build: all

packages/ntool:
		(cd packages; ln -s ../../../../ntool .)
		(cd packages/ntool/src; make all)

packages/l3vpn:
		(cd packages; if [ ! -L l3vpn ]; then ln -s $(NCS_DIR)/examples.ncs/service-provider/mpls-vpn/packages/l3vpn .; fi)
		(cd packages/l3vpn/src; make all)
		(cd packages/l3vpn/; if [ ! -d cli ]; then mkdir cli;fi)
		(cp ../payloads/*.cfg packages/l3vpn/cli/)

packages/cisco-ios:
		(cd packages; if [ ! -L cisco-ios ]; then ln -s $(NCS_DIR)/examples.ncs/service-provider/mpls-vpn/packages/cisco-ios .; fi)
		(cd packages/cisco-ios/src; make all)

packages/cisco-iosxr:
		(cd packages; if [ ! -L cisco-iosxr ]; then ln -s $(NCS_DIR)/examples.ncs/service-provider/mpls-vpn/packages/cisco-iosxr .; fi)
		(cd packages/cisco-iosxr/src; make all)

packages/alu-sr:
		(cd packages; if [ ! -L alu-sr ]; then ln -s $(NCS_DIR)/examples.ncs/service-provider/mpls-vpn/packages/alu-sr .; fi)
		(cd packages/alu-sr/src; make all)

ncs-project:
	ncs-project update -y

start: stop netsim-start
	ncs

stop: netsim-stop
	ncs --stop || true

clean: packages-clean netsim-clean db-clean
	rm -rf logs/* lux_logs
	rm -rf .bundle
	rm -rf packages/*

db-clean:
	rm -rf state/* ncs-cdb/*

# Handy CLI targets
.PHONY: cli cli-c cli-j

cli: cli-j

cli-c:
	ncs_cli -u admin -C

cli-j:
	ncs_cli -u admin


###
### HERE FOLLOWS SOME HANDY GIT TARGETS WHEN WORKING WITH REMOTE REPOS
###
.PHONY: gstat glog
gstat:
	@for i in `grep GIT_PACKAGES .build-meta 2> /dev/null | cut -d= -f2`; \
	  do \
	    echo ""; \
	    echo "--- $$i ---"; \
	    (cd "packages/$$i"; \
	    git status -uno --ignore-submodules;); \
	  done

# Set N=<n> on the command line for more log output.
N = 1
glog:
	@for i in `grep GIT_PACKAGES .build-meta 2> /dev/null | cut -d= -f2`; \
	  do \
	    echo ""; \
	    echo "--- $$i ---"; \
	    (cd "packages/$$i"; \
	     git --no-pager log -n "$(N)";); \
	    echo ""; \
	  done
